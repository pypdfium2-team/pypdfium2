# SPDX-FileCopyrightText: 2025 geisserml <geisserml@gmail.com>
# SPDX-FileCopyrightText: 2025 wojiushixiaobai <296015668@qq.com>
# SPDX-License-Identifier: Apache-2.0 OR BSD-3-Clause

name: Build with cibuildwheel
on:
  workflow_dispatch:
    inputs:
      cibw_py_ver:
        default: 'cp312'
        type: string
      existing:
        default: true
        type: boolean
      ibm:
        default: true
        type: boolean
      emulated:
        default: false
        type: boolean
      # TODO
      # musl:
      #   default: false
      #   type: boolean

permissions: {}

jobs:
  
  prepare_matrix:
    name: Determine build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Run python script that outputs the build matrix
        id: set-matrix
        shell: python
        env:
          BUILD_EXISTING: ${{ inputs.existing && 1 || 0 }}
          BUILD_IBM: ${{ inputs.ibm && 1 || 0 }}
          BUILD_EMULATED: ${{ inputs.emulated && 1 || 0 }}
        run: |
          # SPDX-SnippetBegin
          # SPDX-SnippetCopyrightText: 2025 geisserml <geisserml@gmail.com>
          # SPDX-License-Identifier: Apache-2.0 OR BSD-3-Clause
          
          import os
          import sys
          import json
          
          existing = bool(int( os.environ["BUILD_EXISTING"] ))
          ibm      = bool(int( os.environ["BUILD_IBM"] ))
          emulated = bool(int( os.environ["BUILD_EMULATED"] ))
          
          # TODO add musllinux once our cibuildwheel config can wangle it
          matrix = []
          def add_job(os, arch, needs_emulator=False, images=("manylinux",)):
              for image in images:
                  matrix.append(dict(
                      os=os, arch=arch, image=image, needs_emulator=needs_emulator
                  ))
          
          if existing:
              add_job("ubuntu-24.04", "x86_64")
              add_job("ubuntu-24.04-arm", "aarch64")
          if ibm:
              add_job("ubuntu-24.04", "ppc64le", True)  # False
              add_job("ubuntu-24.04", "s390x", True)  # False
          if emulated:
              add_job("ubuntu-24.04", "loongarch64", True)
              # XXX riscv64 container does not have gn dependency, failing. TODO see if we can procure a pre-build somewhere else.
              add_job("ubuntu-24.04", "riscv64", True)
          
          matrix_json = json.dumps(matrix)
          print(matrix_json, file=sys.stderr)
          with open(os.environ["GITHUB_OUTPUT"], 'a') as output_fh:
              print(f"matrix={matrix_json}", file=output_fh)
          
          # SPDX-SnippetEnd
  
  build_wheels:
    name: Build ${{ matrix.arch }} ${{ matrix.image }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare_matrix
    
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.prepare_matrix.outputs.matrix) }}
    
    steps:
      
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        if: ${{ matrix.needs_emulator }}
        uses: docker/setup-qemu-action@v3
      
      - name: Build wheels
        uses: pypdfium2-team/cibuildwheel@v3.1.3
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          # Will be tagged as not python specific by our setup.py. inputs.cibw_py_ver only controls the version used at build time. Could also use `*`, then cibuildwheel would build with the oldest supported version, and walk through the others but skip because a compatible wheel is around already.
          CIBW_BUILD: "${{ inputs.cibw_py_ver }}-${{ matrix.image }}_${{ matrix.arch }}"
          # the symlinks are required on aarch64 and loongarch64
          # TODO use https://github.com/loong64/gn/releases/latest/download/gn-linux-loong64.tar.gz for loongarch64
          CIBW_BEFORE_ALL_LINUX: |
            dnf -y install gn ninja-build freetype-devel glib2-devel lcms2-devel libjpeg-devel libpng-devel libtiff-devel openjpeg2-devel zlib-devel && \
            ln -s /opt/rh/gcc-toolset-14/root/bin/gcc /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-gcc && \
            ln -s /opt/rh/gcc-toolset-14/root/bin/g++ /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-g++ && \
            ln -s /opt/rh/gcc-toolset-14/root/bin/readelf /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-readelf && \
            ln -s /opt/rh/gcc-toolset-14/root/bin/nm /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-nm
          CIBW_ENVIRONMENT: PDFIUM_PLATFORM="sourcebuild-native" BUILD_PARAMS="vendor_deps=['icu']"
          # TODO run test suite on platforms that have pillow and numpy prebuilds
          CIBW_TEST_COMMAND: python -m pypdfium2 --version
        with:
          output-dir: wheelhouse
      
      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: pypdfium2-wheel-${{ matrix.arch }}
