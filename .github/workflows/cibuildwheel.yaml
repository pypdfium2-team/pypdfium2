# SPDX-FileCopyrightText: 2025 geisserml <geisserml@gmail.com>
# SPDX-FileCopyrightText: 2025 wojiushixiaobai <296015668@qq.com>
# SPDX-License-Identifier: Apache-2.0 OR BSD-3-Clause

# NOTE: This workflow is currently written with a dynamic matrix.
# Another option would be to extract a reusable "build one" workflow and declare an individual job for each target here.

name: Build with cibuildwheel
on:
  workflow_dispatch:
    inputs:
      cibw_py_ver:
        default: 'cp38'
        type: string
      linux_main:
        default: true
        type: boolean
      linux_ibm:
        default: true
        type: boolean
      linux_emulated:
        default: false
        type: boolean
      linux_musl:
        default: true
        type: boolean

permissions: {}

jobs:
  
  prepare_matrix:
    name: Determine build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Run python script that outputs the build matrix
        id: set-matrix
        shell: python
        env:
          LINUX_MAIN:     ${{ inputs.linux_main     && 1 || 0 }}
          LINUX_IBM:      ${{ inputs.linux_ibm      && 1 || 0 }}
          LINUX_EMULATED: ${{ inputs.linux_emulated && 1 || 0 }}
          LINUX_MUSL:     ${{ inputs.linux_musl     && 1 || 0 }}
        run: |
          import os, sys, json
          
          LINUX_MAIN     = bool(int( os.environ["LINUX_MAIN"] ))
          LINUX_IBM      = bool(int( os.environ["LINUX_IBM"] ))
          LINUX_EMULATED = bool(int( os.environ["LINUX_EMULATED"] ))
          LINUX_MUSL     = bool(int( os.environ["LINUX_MUSL"] ))
          
          matrix = []
          images = ["manylinux"]
          if LINUX_MUSL:
              images.append("musllinux")
          
          def job(image, os, arch, emulated=False):
              matrix.append(dict(
                  image=image, os=os, arch=arch, needs_emulator=emulated
              ))
          
          def linux_job(os, arch, emulated=False, images=images):
              for image in images:
                  job(os, arch, image, emulated)
          
          if LINUX_MAIN:
              linux_job("ubuntu-24.04", "x86_64")
              linux_job("ubuntu-24.04-arm", "aarch64")
          if LINUX_IBM:
              # XXX will become native as soon as we get access to IBM's self-hosted runners
              linux_job("ubuntu-24.04", "ppc64le", True)  # False
              linux_job("ubuntu-24.04", "s390x", True)  # False
          if LINUX_EMULATED:
              linux_job("ubuntu-24.04", "loongarch64", True)
              linux_job("ubuntu-24.04", "riscv64", True)
              if LINUX_MUSL:
                  # pdfium-binaries don't currently build armv7l for musl (but they do for glibc)
                  linux_job("ubuntu-24.04", "armv7l", True, images=("musllinux", ))
          
          matrix_json = json.dumps(matrix)
          print(matrix_json, file=sys.stderr)
          with open(os.environ["GITHUB_OUTPUT"], 'a') as output_fh:
              print(f"matrix={matrix_json}", file=output_fh)
  
  build_wheels:
    name: Build ${{ matrix.arch }} ${{ matrix.image }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare_matrix
    
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.prepare_matrix.outputs.matrix) }}
    
    steps:
      
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        if: ${{ matrix.needs_emulator }}
        uses: docker/setup-qemu-action@v3
      
      # Reminder: most configuration is in pyproject.toml so we can use TOML overrides
      - name: Build wheels
        uses: pypdfium2-team/cibuildwheel@v3.1.3
        env:
          # Will be tagged as not python specific by our setup.py. inputs.cibw_py_ver only controls the version used at build time. Could also use `*`, then cibuildwheel would build with the oldest supported version, and walk through the others but skip because a compatible wheel is around already.
          CIBW_BUILD: "${{ inputs.cibw_py_ver }}-${{ matrix.image }}_${{ matrix.arch }}"
          CIBW_ARCHS: ${{ matrix.arch }}
        with:
          output-dir: wheelhouse
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: cibw-${{ matrix.image }}-${{ matrix.arch }}
