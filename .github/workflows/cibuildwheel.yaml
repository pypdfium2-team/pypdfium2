# SPDX-FileCopyrightText: 2025 wojiushixiaobai <296015668@qq.com>
# SPDX-FileCopyrightText: 2025 geisserml <geisserml@gmail.com>
# SPDX-License-Identifier: Apache-2.0 OR BSD-3-Clause

name: Build with cibuildwheel
on:
  workflow_dispatch:
    inputs:
      cibw_py_ver:
        default: 'cp312'
        type: string
      existing:
        default: true
        type: boolean
      ibm:
        default: true
        type: boolean
      emulated:
        default: false
        type: boolean
      # TODO
      # musl:
      #   default: false
      #   type: boolean

permissions: {}

jobs:
  
  prepare_matrix:
    name: Determine build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Run python script that outputs the build matrix
        id: set-matrix
        shell: python
        env:
          BUILD_EXISTING: ${{ inputs.existing && 1 || 0 }}
          BUILD_IBM: ${{ inputs.ibm && 1 || 0 }}
          BUILD_EMULATED: ${{ inputs.emulated && 1 || 0 }}
        run: |
          import os
          import sys
          import json
          
          existing = bool(int( os.environ["BUILD_EXISTING"] ))
          ibm      = bool(int( os.environ["BUILD_IBM"] ))
          emulated = bool(int( os.environ["BUILD_EMULATED"] ))
          
          matrix = []
          if existing:
              matrix.append({
                  "os": "ubuntu-24.04",
                  "arch": "x86_64",
                  "image": "manylinux",
                  "needs_emulator": False
              })
              matrix.append({
                  "os": "ubuntu-24.04-arm",
                  "arch": "aarch64",
                  "image": "manylinux",
                  "needs_emulator": False
              })
          if ibm:
              matrix.append({
                  "os": "ubuntu-24.04",
                  "arch": "ppc64le",
                  "image": "manylinux",
                  "needs_emulator": True
              })
              matrix.append({
                  "os": "ubuntu-24.04",
                  "arch": "s390x",
                  "image": "manylinux",
                  "needs_emulator": True
              })
          if emulated:
              matrix.append({
                  "os": "ubuntu-24.04",
                  "arch": "loongarch64",
                  "image": "manylinux",
                  "needs_emulator": True,
              })
              # XXX riscv64 container does not have gn dependency, failing. TODO see if we can procure a pre-build somewhere else.
              matrix.append({
                  "os": "ubuntu-24.04",
                  "arch": "riscv64",
                  "image": "manylinux",
                  "needs_emulator": True,
              })
          
          matrix_json = json.dumps(matrix)
          print(matrix_json, file=sys.stderr)
          
          with open(os.environ["GITHUB_OUTPUT"], 'a') as output_fh:
              print(f"matrix={matrix_json}", file=output_fh)
  
  build_wheels:
    name: Build ${{ matrix.arch }} ${{ matrix.image }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare_matrix
    
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.prepare_matrix.outputs.matrix) }}
    
    steps:
      
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        if: ${{ matrix.needs_emulator }}
        uses: docker/setup-qemu-action@v3
      
      - name: Build wheels
        uses: pypdfium2-team/cibuildwheel@v3.1.3
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          # Will be tagged as not python specific by our setup.py. inputs.cibw_py_ver only controls the version used at build time. Could also use `*`, then cibuildwheel would build with the oldest supported version, and walk through the others but skip because a compatible wheel is around already.
          CIBW_BUILD: "${{ inputs.cibw_py_ver }}-${{ matrix.image }}_${{ matrix.arch }}"
          # the symlinks are required on aarch64 and loongarch64
          # TODO use https://github.com/loong64/gn/releases/latest/download/gn-linux-loong64.tar.gz for loongarch64
          CIBW_BEFORE_ALL_LINUX: >
            dnf -y install gn ninja-build freetype-devel glib2-devel lcms2-devel libjpeg-devel libpng-devel libtiff-devel openjpeg2-devel zlib-devel &&
            ln -s /opt/rh/gcc-toolset-14/root/bin/gcc /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-gcc &&
            ln -s /opt/rh/gcc-toolset-14/root/bin/g++ /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-g++ &&
            ln -s /opt/rh/gcc-toolset-14/root/bin/readelf /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-readelf &&
            ln -s /opt/rh/gcc-toolset-14/root/bin/nm /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-nm
          CIBW_ENVIRONMENT: PDFIUM_PLATFORM="sourcebuild-native" BUILD_PARAMS="vendor_deps=['icu']"
          # Install C-extension test dependencies from container rather than PyPI, on behalf of exotic architectures. We need to manually set the PYTHONPATH to get access to system packages in the test venv.
          CIBW_BEFORE_TEST_LINUX: dnf -y install python3-pillow python3-numpy
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: >
            python -m pypdfium2 --version &&
            export PYTHONPATH="${PYTHONPATH}:/usr/lib64/python3.6/site-packages" &&
            python -m pytest "{project}/tests/"
        with:
          output-dir: wheelhouse
      
      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: pypdfium2-wheel-${{ matrix.arch }}
