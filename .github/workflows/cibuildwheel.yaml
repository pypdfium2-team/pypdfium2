# SPDX-FileCopyrightText: 2025 wojiushixiaobai <296015668@qq.com>
# SPDX-FileCopyrightText: 2025 geisserml <geisserml@gmail.com>
# SPDX-License-Identifier: Apache-2.0 OR BSD-3-Clause

name: Build with cibuildwheel
on:
  workflow_dispatch:
    inputs:
      cibw_py_ver:
        default: 'cp312'
        type: string
      existing:
        default: true
        type: boolean
      ibm:
        default: true
        type: boolean
      # XXX riscv64 container does not have gn dependency, failing. TODO see if we can procure a pre-build somewhere else.
      risc:
        default: false
        type: boolean
      # XXX loongarch64 needs patched fork of cibuildwheel, but GH Actions don't support conditional `uses:` expressions. Could use the fork for all, but would prefer not to do that. Could duplicate the cibuildwheel step, or the entire workflow, but neither is nice.
      loongson:
        default: false
        type: boolean

permissions: {}

jobs:
  
  build_wheels:
    name: Build wheel for ${{ matrix.arch }} ${{ matrix.image }} (runs on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        # GitHub doesn't seem to have a proper way to make conditional matrix entries,
        # so we have to use an `enabled` property and check it on each step (nasty).
        include:
          - os: ubuntu-24.04
            arch: x86_64
            image: manylinux
            enabled: ${{ inputs.existing }}
            needs_emulator: false
          - os: ubuntu-24.04-arm
            arch: aarch64
            image: manylinux
            enabled: ${{ inputs.existing }}
            needs_emulator: false
          # ppc64le and s390x will become native as soon as we get access to IBM's self-hosted runners
          - os: ubuntu-24.04
            arch: ppc64le
            image: manylinux
            enabled: ${{ inputs.ibm }}
            needs_emulator: true  # false
          - os: ubuntu-24.04
            arch: s390x
            image: manylinux
            enabled: ${{ inputs.ibm }}
            needs_emulator: true  # false
          - os: ubuntu-24.04
            arch: riscv64
            image: manylinux
            enabled: ${{ inputs.risc }}
            needs_emulator: true
          - os: ubuntu-24.04
            arch: loongarch64
            image: manylinux
            enabled: ${{ inputs.loongson }}
            needs_emulator: true
    
    steps:
      
      - name: Check out the repo
        if: ${{ matrix.enabled }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        if: ${{ matrix.enabled && matrix.needs_emulator }}
        uses: docker/setup-qemu-action@v3
      
      - name: Build wheels
        if: ${{ matrix.enabled }}
        uses: pypa/cibuildwheel@v3.1.3  # loong64/cibuildwheel@v2.23.2
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          # Will be tagged as not python specific by our setup.py. inputs.cibw_py_ver only controls the version used at build time. Could also use `*`, then cibuildwheel would build with the oldest supported version, and walk through the others but skip because a compatible wheel is around already.
          CIBW_BUILD: "${{ inputs.cibw_py_ver }}-${{ matrix.image }}_${{ matrix.arch }}"
          CIBW_BEFORE_ALL_LINUX: |
            dnf -y install gn ninja-build freetype-devel glib2-devel lcms2-devel libjpeg-devel libpng-devel libtiff-devel openjpeg2-devel zlib-devel && \
            # these symlinks are required on aarch64 and loongarch64
            ln -s /opt/rh/gcc-toolset-14/root/bin/gcc /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-gcc && \
            ln -s /opt/rh/gcc-toolset-14/root/bin/g++ /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-g++ && \
            ln -s /opt/rh/gcc-toolset-14/root/bin/readelf /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-readelf && \
            ln -s /opt/rh/gcc-toolset-14/root/bin/nm /opt/rh/gcc-toolset-14/root/bin/${{ matrix.arch }}-linux-gnu-nm
          CIBW_BEFORE_BUILD: python setupsrc/pypdfium2_setup/build_native.py --vendor icu
          CIBW_ENVIRONMENT: PDFIUM_PLATFORM=sourcebuild
          # Test through cibuildwheel harness for simplicity
          # If we want to test on another version of the runner in the future, a new job would be needed
          # Also, install test dependencies from the system. Assumably, CIBW_TEST_REQUIRES would try to install them from PyPI, which won't work with our exotic platforms.
          CIBW_BEFORE_TEST: dnf -y install python3-pytest python3-pillow python3-numpy
          CIBW_TEST_COMMAND: |
            python -m pypdfium2 --version && \
            python -m pytest tests/
        with:
          output-dir: wheelhouse
      
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.enabled }}
        with:
          path: ./wheelhouse/*.whl
          name: pypdfium2-wheel-${{ matrix.arch }}