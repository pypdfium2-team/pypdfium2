# SPDX-FileCopyrightText: 2025 geisserml <geisserml@gmail.com>
# SPDX-FileContributor: 2025 wojiushixiaobai <296015668@qq.com>
# SPDX-License-Identifier: Apache-2.0 OR BSD-3-Clause

name: CIBW
on:
  workflow_dispatch:
    inputs:
      cibw_py_ver:
        default: 'cp38'
        type: string
      linux_main:
        default: true
        type: boolean
      linux_ibm:
        # XXX will change to true if and when we get access to IBM's native runners
        default: false
        type: boolean
      linux_emulated:
        default: false
        type: boolean
      linux_glibc:
        default: true
        type: boolean
      linux_musl:
        default: true
        type: boolean
      # we're using the toolchained build for macOS and Windows for now
      macos:
        default: true
        type: boolean
      windows:
        default: true
        type: boolean

jobs:
  
  linux_x64:
    if: ${{ inputs.linux_main && inputs.linux_glibc }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04
      image: manylinux
      arch: x86_64
  
  linux_arm64:
    if: ${{ inputs.linux_main && inputs.linux_glibc }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04-arm
      image: manylinux
      arch: aarch64
  
  musllinux_x64:
    if: ${{ inputs.linux_main && inputs.linux_musl }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04
      image: musllinux
      arch: x86_64
  
  musllinux_arm64:
    if: ${{ inputs.linux_main && inputs.linux_musl }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04-arm
      image: musllinux
      arch: aarch64
  
  linux_ppc64le:
    if: ${{ inputs.linux_ibm && inputs.linux_glibc }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04  # XXX
      image: manylinux
      arch: ppc64le
      emulated: true  # XXX
  
  linux_s390x:
    if: ${{ inputs.linux_ibm && inputs.linux_glibc }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04  # XXX
      image: manylinux
      arch: s390x
      emulated: true  # XXX
  
  musllinux_ppc64le:
    if: ${{ inputs.linux_ibm && inputs.linux_musl }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04  # XXX
      image: musllinux
      arch: ppc64le
      emulated: true  # XXX
  
  musllinux_s390x:
    if: ${{ inputs.linux_ibm && inputs.linux_musl }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04  # XXX
      image: musllinux
      arch: s390x
      emulated: true  # XXX
  
  # pdfium-binaries don't currently build armv7l for musl
  musllinux_armv7l:
    if: ${{ inputs.linux_emulated && inputs.linux_musl }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04
      image: musllinux
      arch: armv7l
      emulated: true
  
  linux_riscv64:
    if: ${{ inputs.linux_emulated && inputs.linux_glibc }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04
      image: manylinux
      arch: riscv64
      emulated: true
  
  linux_loongarch64:
    if: ${{ inputs.linux_emulated && inputs.linux_glibc }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04
      image: manylinux
      arch: loongarch64
      emulated: true
  
  musllinux_riscv64:
    if: ${{ inputs.linux_emulated && inputs.linux_musl }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04
      image: musllinux
      arch: riscv64
      emulated: true
  
  musllinux_loongarch64:
    if: ${{ inputs.linux_emulated && inputs.linux_musl }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: ubuntu-24.04
      image: musllinux
      arch: loongarch64
      emulated: true
  
  macos_x64:
    if: ${{ inputs.macos }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: macos-13
      image: macosx
      arch: x86_64
  
  # It looks like the toolchain may support macOS arm64 natively
  macos_arm64:
    if: ${{ inputs.macos }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: macos-latest
      image: macosx
      arch: arm64
  
  windows_x64:
    if: ${{ inputs.windows }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: windows-latest
      image: win
      arch: amd64
  
  # Google's toolchain doesn't support native windows ARM hosts yet, but it supports cross-compilation from amd64.
  # https://cibuildwheel.pypa.io/en/stable/platforms/#windows-arm64
  # Note: build system probably ignores cibuildwheel's cross-compilation env vars, so setting target_cpu in GN config (through pyproject.toml) is key here.
  windows_arm64:
    if: ${{ inputs.windows }}
    uses: ./.github/workflows/cibw-one.yaml
    with:
      cibw_py_ver: ${{ inputs.cibw_py_ver }}
      os: windows-latest
      image: win
      arch: arm64
