From a082ab067b5266647d7329b913a9af4e369cd1b7 Mon Sep 17 00:00:00 2001
Message-Id: <a082ab067b5266647d7329b913a9af4e369cd1b7.1640186139.git.geisserml@gmail.com>
From: geisserml <geisserml@gmail.com>
Date: Wed, 22 Dec 2021 16:00:22 +0100
Subject: [PATCH] Patches for native build

---
 config/chromecast/BUILD.gn |  2 +-
 config/clang/BUILD.gn      | 22 --------------------
 config/compiler/BUILD.gn   | 42 ++++++++------------------------------
 config/fuchsia/BUILD.gn    |  2 +-
 config/gcc/BUILD.gn        |  2 +-
 config/linux/BUILD.gn      |  2 +-
 config/posix/BUILD.gn      | 32 -----------------------------
 7 files changed, 12 insertions(+), 92 deletions(-)

diff --git a/config/chromecast/BUILD.gn b/config/chromecast/BUILD.gn
index a4ebc98..6e07c59 100644
--- a/config/chromecast/BUILD.gn
+++ b/config/chromecast/BUILD.gn
@@ -65,7 +65,7 @@ config("executable_config") {
     ldflags = [
       # Export stdlibc++ and libgcc symbols to force shlibs to refer to these
       # symbols from the executable.
-      "-Wl,--export-dynamic",
+      "-Wl",
 
       "-lm",  # stdlibc++ requires math.h
 
diff --git a/config/clang/BUILD.gn b/config/clang/BUILD.gn
index 9512c66..cc8b033 100644
--- a/config/clang/BUILD.gn
+++ b/config/clang/BUILD.gn
@@ -7,28 +7,6 @@ import("clang.gni")
 config("find_bad_constructs") {
   if (clang_use_chrome_plugins) {
     cflags = []
-
-    # The plugin is built directly into clang, so there's no need to load it
-    # dynamically.
-    cflags += [
-      "-Xclang",
-      "-add-plugin",
-      "-Xclang",
-      "find-bad-constructs",
-      "-Xclang",
-      "-plugin-arg-find-bad-constructs",
-      "-Xclang",
-      "raw-ptr-template-as-trivial-member",
-    ]
-
-    if (is_linux || is_chromeos || is_android || is_fuchsia) {
-      cflags += [
-        "-Xclang",
-        "-plugin-arg-find-bad-constructs",
-        "-Xclang",
-        "check-ipc",
-      ]
-    }
   }
 }
 
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index 9a193bb..44e1b6a 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -350,7 +350,7 @@ config("compiler") {
     }
 
     if (use_lld) {
-      ldflags += [ "-fuse-ld=lld" ]
+      ldflags += [ ]
       if (lld_path != "") {
         ldflags += [ "-B$lld_path" ]
       }
@@ -491,7 +491,7 @@ config("compiler") {
   }
 
   if (use_icf && (!is_apple || use_lld)) {
-    ldflags += [ "-Wl,--icf=all" ]
+    ldflags += [ ]
   }
 
   if (is_linux || is_chromeos) {
@@ -522,9 +522,9 @@ config("compiler") {
     if (is_win) {
       # On Windows, we call the linker directly, instead of calling it through
       # the driver.
-      ldflags += [ "--color-diagnostics" ]
+      ldflags += [ ]
     } else {
-      ldflags += [ "-Wl,--color-diagnostics" ]
+      ldflags += [ ]
     }
   }
 
@@ -728,11 +728,11 @@ config("compiler") {
   # beneficial.
   if (use_lld && !enable_call_graph_profile_sort) {
     if (is_win) {
-      ldflags += [ "/call-graph-profile-sort:no" ]
+      ldflags += [ ]
     } else if (!is_apple) {
       # TODO(thakis): Once LLD's Mach-O port basically works, implement call
       # graph profile sorting for it, add an opt-out flag, and pass it here.
-      ldflags += [ "-Wl,--no-call-graph-profile-sort" ]
+      ldflags += [ ]
     }
   }
 
@@ -1208,17 +1208,12 @@ config("compiler_deterministic") {
     # we build same files with same compile flag.
     # Other paths are already given in relative, no need to normalize them.
     if (is_nacl) {
-      # TODO(https://crbug.com/1231236): Use -ffile-compilation-dir= here.
       cflags += [
         "-Xclang",
         "-fdebug-compilation-dir",
         "-Xclang",
         ".",
       ]
-    } else {
-      # -ffile-compilation-dir is an alias for both -fdebug-compilation-dir=
-      # and -fcoverage-compilation-dir=.
-      cflags += [ "-ffile-compilation-dir=." ]
     }
     if (!is_win) {
       # We don't use clang -cc1as on Windows (yet? https://crbug.com/762167)
@@ -1413,12 +1408,6 @@ config("default_warnings") {
       cflags += [ "-Wundeclared-selector" ]
     }
 
-    # Suppress warnings about ABI changes on ARM (Clang doesn't give this
-    # warning).
-    if (current_cpu == "arm" && !is_clang) {
-      cflags += [ "-Wno-psabi" ]
-    }
-
     if (!is_clang) {
       cflags_cc += [
         # See comment for -Wno-c++11-narrowing.
@@ -1484,11 +1473,6 @@ config("default_warnings") {
       cflags += [
         "-Wenum-compare-conditional",
 
-        # An ABI compat warning we don't care about, https://crbug.com/1102157
-        # TODO(thakis): Push this to the (few) targets that need it,
-        # instead of having a global flag.
-        "-Wno-psabi",
-
         # Ignore warnings about MSVC optimization pragmas.
         # TODO(thakis): Only for no_chromium_code? http://crbug.com/912662
         "-Wno-ignored-pragma-optimize",
@@ -1503,10 +1487,6 @@ config("default_warnings") {
         # TODO(https://bugs.chromium.org/p/fuchsia/issues/detail?id=77383)
         cflags += [ "-Wno-deprecated-copy" ]
       }
-
-      if (enable_wmax_tokens) {
-        cflags += [ "-Wmax-tokens" ]
-      }
     }
   }
 }
@@ -1647,9 +1627,6 @@ config("no_chromium_code") {
     ]
     if (!is_nacl) {
       cflags += [
-        # Disabled for similar reasons as -Wunused-variable.
-        "-Wno-unused-but-set-variable",
-
         # TODO(https://crbug.com/1202159): Clean up and enable.
         "-Wno-misleading-indentation",
       ]
@@ -1735,10 +1712,7 @@ config("no_rtti") {
 # (de)allocate memory on a different heap, which would spell trouble if pointers
 # to heap-allocated memory are passed over shared library boundaries.
 config("export_dynamic") {
-  # TODO(crbug.com/1052397): Revisit after target_os flip is completed.
-  if (is_linux || is_chromeos_lacros || export_libcxxabi_from_executables) {
-    ldflags = [ "-rdynamic" ]
-  }
+
 }
 
 # thin_archive -----------------------------------------------------------------
@@ -2488,7 +2462,7 @@ if (is_android || (is_chromeos_ash && is_chromeos_device)) {
 config("default_init_stack_vars") {
   cflags = []
   if (init_stack_vars && is_clang && !is_nacl && !using_sanitizer) {
-    cflags += [ "-ftrivial-auto-var-init=pattern" ]
+    cflags += [ ]
   }
 }
 
diff --git a/config/fuchsia/BUILD.gn b/config/fuchsia/BUILD.gn
index 4a7391f..40e3f9f 100644
--- a/config/fuchsia/BUILD.gn
+++ b/config/fuchsia/BUILD.gn
@@ -27,7 +27,7 @@ config("compiler") {
 
 # Settings for executables.
 config("executable_config") {
-  ldflags = [ "-pie" ]
+  ldflags = [ ]
 }
 
 # Files required to run on Fuchsia on isolated swarming clients.
diff --git a/config/gcc/BUILD.gn b/config/gcc/BUILD.gn
index ff47e25..3849dce 100644
--- a/config/gcc/BUILD.gn
+++ b/config/gcc/BUILD.gn
@@ -91,7 +91,7 @@ if (is_component_build && !is_android) {
 # Settings for executables.
 config("executable_config") {
   configs = executable_and_shared_library_configs_
-  ldflags = [ "-pie" ]
+  ldflags = [ ]
   if (is_android) {
     ldflags += [
       "-Bdynamic",
diff --git a/config/linux/BUILD.gn b/config/linux/BUILD.gn
index 8e42cf9..01c4eff 100644
--- a/config/linux/BUILD.gn
+++ b/config/linux/BUILD.gn
@@ -73,5 +73,5 @@ if (use_glib) {
 # (de)allocate memory on a different heap, which would spell trouble if pointers
 # to heap-allocated memory are passed over shared library boundaries.
 config("export_dynamic") {
-  ldflags = [ "-rdynamic" ]
+  ldflags = []
 }
diff --git a/config/posix/BUILD.gn b/config/posix/BUILD.gn
index 5d15163..999f864 100644
--- a/config/posix/BUILD.gn
+++ b/config/posix/BUILD.gn
@@ -24,36 +24,4 @@ config("runtime_library") {
   cflags_objcc = []
   defines = []
   ldflags = []
-
-  if (!is_apple && sysroot != "" && current_os != "zos") {
-    # Pass the sysroot to all C compiler variants, the assembler, and linker.
-    sysroot_flags = [ "--sysroot=" + rebase_path(sysroot, root_build_dir) ]
-    if (is_linux || is_chromeos) {
-      # This is here so that all files get recompiled after a sysroot roll and
-      # when turning the sysroot on or off. (defines are passed via the command
-      # line, and build system rebuilds things when their commandline
-      # changes). Nothing should ever read this define.
-      sysroot_hash =
-          exec_script("//build/linux/sysroot_scripts/install-sysroot.py",
-                      [ "--print-hash=$current_cpu" ],
-                      "trim string",
-                      [ "//build/linux/sysroot_scripts/sysroots.json" ])
-      defines += [ "CR_SYSROOT_HASH=$sysroot_hash" ]
-    }
-    asmflags += sysroot_flags
-    ldflags += sysroot_flags
-
-    # When use_custom_libcxx=true, some -isystem flags get passed to
-    # cflags_cc to set up libc++ include paths.  We want to make sure
-    # the sysroot includes take lower precendence than the libc++
-    # ones, so they must appear later in the command line.  However,
-    # the gn reference states "These variant-specific versions of
-    # cflags* will be appended on the compiler command line after
-    # 'cflags'."  Because of this, we must set the sysroot flags for
-    # all cflags variants instead of using 'cflags' directly.
-    cflags_c += sysroot_flags
-    cflags_cc += sysroot_flags
-    cflags_objc += sysroot_flags
-    cflags_objcc += sysroot_flags
-  }
 }
-- 
2.25.1

